{% set git_hash_date = "20241014" %}
{% set git_hash = "c2ec8e14a185632b0a5d8b161928ceb50197eddc" %}
# They claim version 1.0 but they don't really release anything on pypi
{% set version = "1.0.0." + git_hash_date + "." + git_hash %}

package:
  # Their package name is "SAM 2" pip claims it is "SAM-2"
  # the lower case is thus "sam-2"
  name: sam-2
  version: {{ version }}

source:
  url: https://github.com/facebookresearch/segment-anything-2/archive/{{ git_hash }}.tar.gz
  sha256: 1fbc78e6b6cedc2b1cdcff6e42ad8004f991451c6dfce1bc5efc7d59c0f203b4
  patches:
    - 216_be_compatible_with_cpu_only.patch

{% set build = 4 %}
{% set build = build + 300 %}  # [cuda_compiler_version != "None"]

build:
  string: cpu_pyh{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  script:
    # Ensure to add PTX at the end, always
    - export TORCH_CUDA_ARCH_LIST="5.0;6.0;6.1;7.0;7.5;8.0;8.6;8.9;9.0+PTX"  # [cuda_compiler_version != "None"]
    - export CUDA_TOOLKIT_ROOT_DIR="${PREFIX}"                               # [cuda_compiler_version != "None"]
    - export FORCE_CUDA=1                                                    # [cuda_compiler_version != "None"]
    - export SAM2_BUILD_ALLOW_ERRORS=0                                       # [cuda_compiler_version != "None"]
    - python -m pip install . -vv
  number: {{ build }}
  skip: true      # [py<310]
  skip: true      # [win]
  skip: true      # [cuda_compiler_version == "11.8"]

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - {{ stdlib('c') }}                      # [cuda_compiler_version != "None"]
    - {{ compiler('c') }}                    # [cuda_compiler_version != "None"]
    - {{ compiler('cxx') }}                  # [cuda_compiler_version != "None"]
    - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
    - ninja                                  # [cuda_compiler_version != "None"]
    - libcublas-dev                          # [build_platform != target_platform and cuda_compiler_version != "None"]
    - libcusolver-dev                        # [build_platform != target_platform and cuda_compiler_version != "None"]
    - libcusparse-dev                        # [build_platform != target_platform and cuda_compiler_version != "None"]
    - cuda-cudart-dev                        # [build_platform != target_platform and cuda_compiler_version != "None"]
  host:
    - python
    - pip
    - setuptools
    - pytorch                                # [cuda_compiler_version != "None"]
    - libtorch *=cuda*                       # [cuda_compiler_version != "None"]
    - libcublas-dev                          # [cuda_compiler_version != "None"]
    - libcusolver-dev                        # [cuda_compiler_version != "None"]
    - libcusparse-dev                        # [cuda_compiler_version != "None"]
    - cuda-cudart-dev                        # [cuda_compiler_version != "None"]
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
  run:
    - python
    - hydra-core
    - pytorch
    - libtorch *=cuda*                       # [cuda_compiler_version != "None"]
    - torchvision >=0.18.1
    # https://github.com/facebookresearch/segment-anything-2/pull/216
    - scikit-image                           # [cuda_compiler_version == "None"]
    # It doesn't seem to be used anywhere in their code...
    # https://github.com/conda-forge/iopath-feedstock/pull/3
    - iopath >=0.1.10
    - tqdm
    - pillow
    # avoid that people without GPUs needlessly download ~0.5-1GB
    - __cuda                                 # [cuda_compiler_version != "None"]
  run_constrained:
    # Let the run_export from pytorch take effect
    # so put their requirement here
    - pytorch >=2.3.1
    # There seems to be an other package on conda-forge with
    # a similar name that wasn't packaged from the official
    # source
    # https://github.com/conda-forge/sam2-feedstock/issues/4
    # I will be working with them to ensure that
    # we have a cohesive version at conda-forge but the 0.4.1
    # version should not be co-installed with this package
    - sam2 >=1.0.0

test:
  imports:
    - sam2
  requires:
    - pip
  commands:
    - pip check
    # Tests that cuda compilation worked for the expected output
    - test -f ${SP_DIR}/sam2/_C.so  # [cuda_compiler_version != "None"]

about:
  home: https://github.com/facebookresearch/segment-anything-2
  summary: 'SAM 2: Segment Anything in Images and Videos'
  description: |
    Segment Anything Model 2 (SAM 2) is a foundation model towards solving
    promptable visual segmentation in images and videos. We extend SAM to video
    by considering images as a video with a single frame. The model design is a
    simple transformer architecture with streaming memory for real-time video
    processing. We build a model-in-the-loop data engine, which improves model
    and data via user interaction, to collect our SA-V dataset, the largest
    video segmentation dataset to date. SAM 2 trained on our data provides
    strong performance across a wide range of tasks and visual domains.
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE

extra:
  recipe-maintainers:
    - hmaarrfk
